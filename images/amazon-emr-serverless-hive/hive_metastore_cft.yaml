# Using Hive Metastore with EMR Serverless
# Last Updated on Aug 15, 2022 by rpsarda@

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for Using Hive Metastore with EMR Serverless
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
   # S3 Bucket for EMR Serverless
  EMRServerlessBucketName:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'emr-hive-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

# VPC configurations
  VPCEmrMs:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPCEmrMs

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCEmrMs
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCEmrMs
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCEmrMs
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.192.20.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCEmrMs
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.21.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCEmrMs
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCEmrMs
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCEmrMs
      Tags:
        - Key: Name
          Value: emr-serverless-hive-ms Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # EMR Serverless Hive Metastore
  RDSIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable RDP access via port 3389'
      GroupName: "rds-ingress-sg"
      Tags:
      - Key: Name
        Value: EMR Serverless Metastore DB
      VpcId: !Ref VPCEmrMs
      SecurityGroupIngress: 
      - CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: "tcp"
        ToPort: 3306

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
        DBSubnetGroupDescription: 'Subnet Group for mySQL database'
        DBSubnetGroupName: 'emr-serverless-database-subnet-group'
        SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  
  EMRServerlessMetastoreDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    DependsOn: RDSSecrets
    Properties:
      DBInstanceIdentifier: EMRServInstance
      AllocatedStorage: '5'
      DBInstanceClass: 'db.t2.small'
      Engine: mariadb
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:MasterUsername}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:MasterUserPassword}}' ]]
      VPCSecurityGroups: 
      - Ref : RDSIngressSecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      PubliclyAccessible: 'false'
      EngineVersion: '10.6.8'
      Tags:
      - Key: Name
        Value: EMR Serverless Metastore DB

  RDSSecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: AWS RDS credentials
      Name: 'rds-users-credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"MasterUsername":"dbmaster"}'
        GenerateStringKey: MasterUserPassword
        PasswordLength: 16
        ExcludeCharacters: "/@\"'\\"

  EMRServerlessJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - emr-serverless.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: "Service role for EMR Serverless"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${EMRServerlessBucketName}/*"

 
# Create EMR Cluster and Setup Hive metastore database
  EmrHmsCluster:
    Type: AWS::EMR::Cluster
    DependsOn:
      - EMRHMSRole
      - EMRHMSEC2RoleInstanceProfile
      - EMRHMSEC2Role
      - EMRServerlessMetastoreDB
    Properties:
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: m5.xlarge
          Market: ON_DEMAND
          Name: cfnMaster
        CoreInstanceGroup:
          InstanceCount: 1
          InstanceType: m5.xlarge
          Market: ON_DEMAND
          Name: cfnCore
        Ec2SubnetId: !Ref PublicSubnet1
        Ec2KeyName: !Ref KeyName
      Name: emr_setup_hms_cluster
      Configurations:
      # RDS Metastore (Make sure ElasticMapreduce-slave/master SGs have TCP:3306 outbound allowed)
      - Classification: hive-site
        ConfigurationProperties:
          javax.jdo.option.ConnectionURL: 
            Fn::Join:
              - ''
              - - "jdbc:mysql://"
                - !GetAtt EMRServerlessMetastoreDB.Endpoint.Address
                - ":3306/hivemetastore?createDatabaseIfNotExist=true"
          javax.jdo.option.ConnectionDriverName: org.mariadb.jdbc.Driver
          javax.jdo.option.ConnectionUserName: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:MasterUsername}}' ]]
          javax.jdo.option.ConnectionPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:MasterUserPassword}}' ]]
          hive.metastore.warehouse.dir:
            Fn::Join:
            - ''
            - - s3://
              - Ref: EMRServerlessBucketName
              - "/warehouse/"
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Spark
        - Name: Hue 
        - Name: HCatalog
      JobFlowRole: !Ref EMRHMSEC2Role
      ServiceRole: !Ref EMRHMSRole
      ReleaseLabel: emr-6.6.0
      VisibleToAllUsers: true
      LogUri:
        Fn::Join:
        - ''
        - - s3n://
          - Ref: EMRServerlessBucketName
          - "/emrlogs/"
      Steps:
        - ActionOnFailure: 'CANCEL_AND_WAIT'
          HadoopJarStep:
            Args:
              - 'state-pusher-script'
            Jar: 'command-runner.jar'
          Name: 'Setup Hadoop Debugging'
  EMRHMSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
      RoleName: EMR_HMS_Role
  EMRHMSEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
      RoleName: EMR_HMS_EC2_Role
  EMRHMSEC2RoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: EMR_HMS_EC2_Role
      Path: /
      Roles:
        - !Ref EMRHMSEC2Role  

# EMR Serverless Spark Application
  SparkApplication:
    Type: AWS::EMRServerless::Application
    Properties:
      Name: spark-3.2
      ReleaseLabel: emr-6.6.0
      Type: Spark
      MaximumCapacity:
        Cpu: 200 vCPU
        Memory: 100 GB
      AutoStartConfiguration:
        Enabled: true
      NetworkConfiguration :
        SecurityGroupIds:
        - !Ref RDSIngressSecurityGroup
        SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      AutoStopConfiguration:
        Enabled: true
        IdleTimeoutMinutes: 100
      InitialCapacity:
        - Key: Driver
          Value:
            WorkerCount: 3
            WorkerConfiguration:
              Cpu: 2 vCPU
              Memory: 4 GB
              Disk: 21 GB
        - Key: Executor
          Value:
            WorkerCount: 4
            WorkerConfiguration:
              Cpu: 1 vCPU
              Memory: 4 GB
              Disk: 20 GB
Outputs:
  EMRServerlessHiveMetastoreDB:
    Description: EMR Serverless Hive Metastore DB
    Value:
      Fn::GetAtt:
      - EMRServerlessMetastoreDB
      - Endpoint.Address
  SparkApplicationId:
    Value: !Ref SparkApplication
  JobRoleArn:
    Value: !GetAtt EMRServerlessJobRole.Arn
  S3Bucket:
    Value: !Ref EMRServerlessBucketName
  RDSSecretId:
    Value: 'rds-users-credentials'
  