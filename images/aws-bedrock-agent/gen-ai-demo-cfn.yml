AWSTemplateFormatVersion: "2010-09-09"
Description: Deploying lambda function for Generative AI demo on AWS

Parameters:
  S3Bucket:
    Type: String

Resources: 
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'

  permissionForBedrock:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref DataAnalysisFunc
       Action: lambda:InvokeFunction
       Principal: 'bedrock.amazonaws.com'

  DataAnalysisFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: data_process_action
      Code:
        ZipFile: |
          import os
          import json
          import pandas
          import boto3

          S3_BUCKET = os.environ["S3_BUCKET"]
          S3_OBJECT = os.environ["S3_OBJECT"]

          def lambda_handler(event, context):
              # Print the received event to the logs
              print("Received event: ")
              print(event)

              # Initialize response code to None
              response_code = None

              # Extract the action group, api path, and parameters from the prediction
              action = event["actionGroup"]
              api_path = event["apiPath"]
              inputText = event["inputText"]
              httpMethod = event["httpMethod"]

              print(f"inputText: {inputText}")

              # Check the api path to determine which tool function to call
              if api_path == "/get_num_records":
                  s3 = boto3.client("s3")
                  s3.download_file(S3_BUCKET, S3_OBJECT, "/tmp/data.csv")
                  df = pandas.read_csv("/tmp/data,csv")

                  # Get count of dataframe
                  count = length(df)

                  response_body = {"application/json": {"body": str(count)}}
                  response_code = 200
              else:
                  # If the api path is not recognized, return an error message
                  body = {"{}::{} is not a valid api, try another one.".format(action, api_path)}
                  response_code = 400
                  response_body = {"application/json": {"body": str(body)}}

              # Print the response body to the logs
              print(f"Response body: {response_body}")

              # Create a dictionary containing the response details
              action_response = {
                  "actionGroup": action,
                  "apiPath": api_path,
                  "httpMethod": httpMethod,
                  "httpStatusCode": response_code,
                  "responseBody": response_body,
              }

              # Return the list of responses as a dictionary
              api_response = {"messageVersion": "1.0", "response": action_response}

              return api_response
      Description: Return number of items in dataframe
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 120
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          S3_OBJECT: "" 