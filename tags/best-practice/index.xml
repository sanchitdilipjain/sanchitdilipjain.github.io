<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Best-Practice on Sanchit's blog</title><link>https://sanchitdilipjain.github.io/tags/best-practice/</link><description>Recent content in Best-Practice on Sanchit's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 06 Dec 2024 18:05:09 +0000</lastBuildDate><atom:link href="https://sanchitdilipjain.github.io/tags/best-practice/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Best Practices for MongoDB on AWS üîç</title><link>https://sanchitdilipjain.github.io/post/security-practice-mongodb-aws/</link><pubDate>Wed, 04 Dec 2024 12:00:00 +0000</pubDate><guid>https://sanchitdilipjain.github.io/post/security-practice-mongodb-aws/</guid><description>&lt;h2 id="security-best-practices-for-mongodb-on-aws">Security Best Practices for MongoDB on AWS&lt;/h2>
&lt;p>&lt;strong>Introduction:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MongoDB is a leading document database known for its flexibility and scalability. As a document-oriented database, it stores data in a format called BSON (Binary JSON), which allows for a more dynamic and flexible data model compared to traditional relational databases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This document-based structure enables developers to store complex data types and hierarchical relationships without the constraints of a fixed schema, making it ideal for modern applications that require rapid development and scalability.&lt;/p></description></item><item><title>Tips &amp; Tricks for Optimizing Amazon OpenSearch: Performance and Cost Efficiency üîç</title><link>https://sanchitdilipjain.github.io/post/amazon-opensearch-best-practice/</link><pubDate>Wed, 12 Jun 2024 12:00:00 +0000</pubDate><guid>https://sanchitdilipjain.github.io/post/amazon-opensearch-best-practice/</guid><description>&lt;h2 id="tips--tricks-for-optimizing-amazon-opensearch-performance-and-cost-efficiency">Tips &amp;amp; Tricks for Optimizing Amazon OpenSearch: Performance and Cost Efficiency&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Amazon OpenSearch Service (formerly Amazon Elasticsearch Service) is a powerful tool for search, log analytics, and real-time application monitoring. However, as with any cloud service, improper management can lead to performance issues and unexpected costs. Here, we&amp;rsquo;ll explore best practices to get the most out of OpenSearch while keeping your costs under control.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Rightsizing Your Infrastructure&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Instance Selection&lt;/strong>: Use the latest generation instance types. They offer better performance for the same price as older generations. Analyze your workload and choose an instance type with the right balance of vCPUs, memory, and storage. Consider using Amazon&amp;rsquo;s Cost Explorer to understand your usage patterns.&lt;/li>
&lt;li>&lt;strong>Reserved Instances&lt;/strong>: If your OpenSearch usage is predictable, consider Reserved Instances (RIs). RIs offer significant discounts compared to on-demand pricing. You can choose between 1-year or 3-year terms, with upfront savings increasing with longer commitments.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Optimizing Data Storage and Indexing&lt;/strong>&lt;/p></description></item></channel></rss>