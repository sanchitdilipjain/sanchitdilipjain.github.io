<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Best-Practices on Sanchit's blog</title><link>https://sanchitdilipjain.github.io/tags/best-practices/</link><description>Recent content in Best-Practices on Sanchit's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 06 Dec 2024 12:56:40 +0000</lastBuildDate><atom:link href="https://sanchitdilipjain.github.io/tags/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Tips &amp; Tricks while working on Amazon Redshift 🛡️</title><link>https://sanchitdilipjain.github.io/post/tips-tricks-redshift/</link><pubDate>Fri, 18 Aug 2023 12:00:00 +0000</pubDate><guid>https://sanchitdilipjain.github.io/post/tips-tricks-redshift/</guid><description>&lt;h2 id="tips--tricks-while-working-on-amazon-redshift">Tips &amp;amp; Tricks while working on Amazon Redshift&lt;/h2>
&lt;p>&lt;strong>Introduction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Amazon Redshift, known for its scalability and efficiency, provides a powerful solution for data warehousing. This post offers a comprehensive technical exploration of Amazon Redshift, discussing best practices and examples about table design, query performance, cluster management, cost control, data sharing, data governance and security.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Table Design&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Distribution Styles:&lt;/strong>&lt;/p>
&lt;p>Redshift supports EVEN, KEY, and ALL distribution styles. The appropriate distribution style, which governs how data gets distributed across nodes, can significantly impact query performance. EVEN, which distributes rows evenly across the slices, is generally a safe default.&lt;/p></description></item><item><title>Key Considerations for Utilizing Amazon Kinesis Producer and Consumer Libraries🛡️</title><link>https://sanchitdilipjain.github.io/post/kinesis-library-best-practices/</link><pubDate>Thu, 10 Aug 2023 12:00:00 +0000</pubDate><guid>https://sanchitdilipjain.github.io/post/kinesis-library-best-practices/</guid><description>&lt;h2 id="key-considerations-for-utilizing-amazon-kinesis-producer-and-consumer-libraries">Key Considerations for Utilizing Amazon Kinesis Producer and Consumer Libraries&lt;/h2>
&lt;p>&lt;strong>Introduction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>As real-time data processing becomes increasingly critical in modern tech ecosystems, AWS Kinesis Data Streams (KDS) has emerged as a go-to solution. Kinesis offers scalable and durable real-time data streaming, further complemented by two crucial libraries:&lt;/p>
&lt;ul>
&lt;li>Kinesis Producer Library (KPL) and&lt;/li>
&lt;li>Kinesis Consumer Library (KCL).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Additionally, Kinesis supports advanced data sharing mechanisms, allowing data streams to be consumed by multiple entities simultaneously.&lt;/p></description></item><item><title>How to set up a secure Terraform backend using Amazon S3 + DynamoDB? 🛡️</title><link>https://sanchitdilipjain.github.io/post/best-practice-terraform-backend/</link><pubDate>Fri, 21 Jul 2023 12:00:00 +0000</pubDate><guid>https://sanchitdilipjain.github.io/post/best-practice-terraform-backend/</guid><description>&lt;h2 id="how-to-set-up-a-secure-terraform-backend-using-amazon-s3--dynamodb">How to set up a secure Terraform backend using Amazon S3 + DynamoDB&lt;/h2>
&lt;p>&lt;strong>Introduction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Managing infrastructure as code is crucial for modern DevOps practices, and Terraform has emerged as a powerful tool for achieving this. In this technical guide, we will delve into the best practices for configuring a Terraform backend using Amazon Web Services&amp;rsquo; S3 bucket and associated resources.&lt;/li>
&lt;li>Our aim is to equip you with the skills needed to establish a production-ready environment with sensible defaults.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Prerequisites and Setup&lt;/strong>&lt;/p></description></item></channel></rss>